@inject IJSRuntime JSRuntime;

<button class="btn btn-primary" @onclick="OnCrea">Crea evento</button>
<table class="table mt-4">
    <tr>
        <th>Id</th>
        <th>Nome</th>
        <th>Localit√†</th>
        <th>Data</th>
        <th></th>
    </tr>
    @foreach (var evento in ElementiLista)
    {
        <tr>
            <td>@evento.Id</td>
            <td>@evento.Nome</td>
            <td>@evento.Localita</td>
            <td>@evento.Data</td>
            <td>
                <button class="btn btn-warning" @onclick="e => OnModifica.InvokeAsync(evento)" >Modifica</button>
                <button class="btn btn-danger" @onclick="e => MostraConferma(evento)">Elimina</button>
            </td>
        </tr>
    }
</table>

<Conferma
    IdConferma="eliminaEvento"
    Titolo="Elimina Evento"
    Messaggio="@("Eliminare l'evento " + @elementoDaEliminare?.Nome)"
    OnSi="ConfermaEliminazione" />

@code {
    [Parameter]
    public List<ElementoListaEvento> ElementiLista { get; set; }

    [Parameter]
    public EventCallback OnCrea { get; set; }

    [Parameter]
    public EventCallback<ElementoListaEvento> OnModifica { get; set; }

    [Parameter]
    public EventCallback<ElementoListaEvento> OnElimina { get; set; }

    private ElementoListaEvento elementoDaEliminare;
    
    private async Task MostraConferma(ElementoListaEvento elemento)
    {
        this.elementoDaEliminare = elemento;
        await JSRuntime.InvokeAsync<bool>("mostraConferma", "eliminaEvento");
    }
    
    private async Task ConfermaEliminazione()
    {
        await OnElimina.InvokeAsync(this.elementoDaEliminare);
        await JSRuntime.InvokeAsync<bool>("nascondiConferma", "eliminaEvento");
    }
}